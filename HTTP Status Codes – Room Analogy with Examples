Think of the internet as a giant hotel. Every URL is like a room inside that hotel. When your browser (the guest) knocks on the door (sends a request), the server (hotel staff) answers with a status code — telling you what’s going on with that room.

 	• 1xx (Informational): The staff hears your knock and says, “Hold on, I’m checking”.
	•	2xx (Success): The staff opens the door and lets you in — everything went fine.
	•	3xx (Redirection): The staff says, “This room has moved, try that other door instead.”
	•	4xx (Client Error): You (the guest) did something wrong — wrong door, no key, or you’re not allowed in.
	•	5xx (Server Error): The hotel staff messed up — the room is broken, under repair, or they can’t serve you right now.

By mapping codes to hotel room situations, we can better understand what servers are telling us when browsing the web.

⸻

🔍 1xx: Informational Rooms

1️⃣ 100: The knock was received, go ahead 🚦
👉 Example: When browser sends a large file upload, server replies “continue sending.”

2️⃣ 101: Switching the type of entrance (protocol change) 🔁
👉 Example: When upgrading from HTTP to WebSocket connection.

3️⃣ 102: Still preparing the room, please wait 🕒
👉 Example: A WebDAV request takes long, server says “still processing.”

4️⃣ 103: Giving early hints about what’s inside 🛠️
👉 Example: Server pushes preload hints (like CSS/JS) before full response.

⸻

✅ 2xx: Success Rooms

5️⃣ 200: The room opened successfully 👍
👉 Example: You visit a webpage and content loads correctly.

6️⃣ 201: A new room has been built for you 🎉
👉 Example: API creates a new user account.

7️⃣ 202: The request accepted, but still working on it ⏳
👉 Example: Server queues a job (like video processing) for later.

8️⃣ 203: Info is from a copy, not the original 📑
👉 Example: Response comes from a proxy with modified headers.

9️⃣ 204: The door opened but nothing to show inside 🗒️
👉 Example: A form submitted successfully, but no content is returned.

🔟 205: The room asks you to refresh/reset your view 🔄
👉 Example: After form submission, client should reset input fields.

1️⃣1️⃣ 206: Only part of the room was shown 📦
👉 Example: A video stream delivers only a chunk of data (range requests).

1️⃣2️⃣ 207: Multiple outcomes for different parts ⚙️
👉 Example: WebDAV returns mixed success/failure for batch file ops.

1️⃣3️⃣ 208: The same room already reported earlier 🔁
👉 Example: A repeated reference in a multi-status response.

1️⃣4️⃣ 226: The room applied special transformations 🔍
👉 Example: A resource was returned with server-side modifications applied.

⸻

🔁 3xx: Redirection Rooms

1️⃣5️⃣ 300: Many possible rooms, choose one 🔀
👉 Example: Multiple language versions available, client must pick.

1️⃣6️⃣ 301: The room has permanently moved 🏠➡️
👉 Example: Old blog URL redirects to a new domain.

1️⃣7️⃣ 302: The room is temporarily found elsewhere 🔄
👉 Example: A product page temporarily points to a promo URL.

1️⃣8️⃣ 303: The room can be found under a different entrance ↩️
👉 Example: After form submission, user redirected to “thank you” page.

1️⃣9️⃣ 304: The room hasn’t changed since your last visit 💤
👉 Example: Browser cache says file hasn’t changed, no new download.

2️⃣0️⃣ 305: Use a proxy door to enter 🚪 (deprecated)
👉 Example: Server instructs client to access via proxy.

2️⃣1️⃣ 306: This door is unused 🚷
👉 Example: Reserved but no longer in use.

2️⃣2️⃣ 307: Temporary redirect — same method used 🔁
👉 Example: POST request redirected but must remain POST.

2️⃣3️⃣ 308: Permanent redirect — always use new entrance 📍
👉 Example: API endpoint permanently changed to a new URL.

⸻

⚠️ 4xx: Client Error Rooms

2️⃣4️⃣ 400: Bad request — your knock was broken 🧐
👉 Example: Malformed JSON sent to API.

2️⃣5️⃣ 401: No permissions to enter this room 🚫
👉 Example: Request to a protected API without login token.

2️⃣6️⃣ 402: Payment required 💳 (reserved)
👉 Example: Reserved for paywall/subscription services.

2️⃣7️⃣ 403: Forbidden — you cannot enter 🚷
👉 Example: Logged in but lacking admin rights.

2️⃣8️⃣ 404: The room was not found ❓
👉 Example: Visiting a non-existent webpage.

2️⃣9️⃣ 405: Wrong way of knocking 🛑
👉 Example: Sending POST when only GET is allowed.

3️⃣0️⃣ 406: The room cannot provide your requested format ⚙️
👉 Example: Asking for XML but server only provides JSON.

3️⃣1️⃣ 407: Must show ID to proxy 🪪
👉 Example: Proxy requires authentication.

3️⃣2️⃣ 408: You took too long ⏳
👉 Example: Slow request timed out.

3️⃣3️⃣ 409: Conflict inside the room 🔀
👉 Example: Editing a record that was already modified by someone else.

3️⃣4️⃣ 410: The room once existed but is gone 🚷
👉 Example: Deleted blog post permanently removed.

3️⃣5️⃣ 411: Must provide content length 📏
👉 Example: Upload without specifying size.

3️⃣6️⃣ 412: Preconditions not met ❌
👉 Example: If-Match header fails during update.

3️⃣7️⃣ 413: You’re carrying too much 🛄
👉 Example: Upload file exceeds server’s max size.

3️⃣8️⃣ 414: Address too long 📝
👉 Example: URL with excessively long query string.

3️⃣9️⃣ 415: Format not supported 📂
👉 Example: Uploading an image in unsupported format.

4️⃣0️⃣ 416: Requested part doesn’t exist 🔍
👉 Example: Asking for byte range outside file size.

4️⃣1️⃣ 417: Expectations failed ❗
👉 Example: Server can’t fulfill “Expect” header.

4️⃣2️⃣ 418: I’m a teapot ☕
👉 Example: Joke code from RFC 2324.

4️⃣3️⃣ 421: Knocked on the wrong house 🏚️
👉 Example: Request routed to wrong virtual host.

4️⃣4️⃣ 422: Can’t process entity 🤔
👉 Example: JSON syntax valid but values invalid.

4️⃣5️⃣ 423: Room is locked 🔒
👉 Example: File locked in WebDAV.

4️⃣6️⃣ 424: Dependency failed 😬
👉 Example: One request fails, dependent one can’t continue.

4️⃣7️⃣ 425: Too early ⏱️
👉 Example: Request sent before TLS handshake finished.

4️⃣8️⃣ 426: Must upgrade ⬆️
👉 Example: Client must switch to HTTPS.

4️⃣9️⃣ 428: Precondition required ✅
👉 Example: API demands If-Match header for updates.

5️⃣0️⃣ 429: Too many knocks 🚦
👉 Example: Exceeded API rate limit.

5️⃣1️⃣ 431: Headers too bulky 📦
👉 Example: Oversized HTTP headers in request.

5️⃣2️⃣ 451: Room blocked for legal reasons ⚖️
👉 Example: Page censored due to court order.

⸻

💥 5xx: Server Error Rooms

5️⃣3️⃣ 500: Something broke inside 🔧
👉 Example: Server bug caused crash.

5️⃣4️⃣ 501: Not prepared for this request 🏗️
👉 Example: API endpoint not implemented yet.

5️⃣5️⃣ 502: Bad gateway 🚪
👉 Example: Reverse proxy got invalid response from backend.

5️⃣6️⃣ 503: Room temporarily unavailable 📴
👉 Example: Server down for maintenance.

5️⃣7️⃣ 504: Upstream too slow ⌛
👉 Example: Proxy timed out waiting for backend.

5️⃣8️⃣ 505: Wrong key for the lock 🔑
👉 Example: Client uses unsupported HTTP version.

5️⃣9️⃣ 506: Negotiation loop 🔁
👉 Example: Variant negotiation misconfigured.

6️⃣0️⃣ 507: No more storage 📂
👉 Example: WebDAV server out of space.

6️⃣1️⃣ 508: Infinite loop 🔄
👉 Example: Server stuck in recursive requests.

6️⃣2️⃣ 510: Extensions needed ⚙️
👉 Example: Client must provide extra headers/extensions.

6️⃣3️⃣ 511: Network authentication required 🛂
👉 Example: Captive Wi-Fi portal asks you to log in before browsing.

⸻
# 🛡️ HTTP Status Codes – Normal vs Suspicious Signs  

This guide explains **HTTP status codes** using the **hotel room analogy**, with a focus on identifying when requests may be **malicious or suspicious**.  
Useful for **incident response, security monitoring, and log analysis**.  

---

| **Code(s)** | **Normal Use** | **Suspicious / Malicious Sign** |
|-------------|----------------|---------------------------------|
| **1xx (100–103)** | Progress messages during upload/handshake. | Large numbers of open “in-progress” connections → **Slowloris DoS**. |
| **200** | Page loads successfully. | Thousands of 200s on `/login` → **successful brute-force**. |
| **201** | New account/resource created. | Spike in 201s → **fake/spam account creation**. |
| **202/204** | Accepted, no content. | Bots probing APIs silently. |
| **301/302** | Page moved or temp redirect. | Redirects to **phishing/open redirect exploit**. |
| **303/307/308** | Proper redirects. | Exploited for **open redirect attacks**. |
| **304** | Cached resource not modified. | Usually safe. |
| **400** | Mistyped/malformed request. | Flood of malformed requests → **fuzzing / injection attempts**. |
| **401** | Unauthenticated access. | Many repeated 401s → **brute-force login**. |
| **403** | Authenticated but forbidden. | Brute-force, privilege escalation attempts. |
| **404** | Mistyped or missing page. | High volume → **directory/file scanning (recon)**. |
| **405** | Wrong HTTP method used. | Attackers testing PUT/DELETE → **method probing**. |
| **406** | Unsupported Accept header. | Bots fuzzing content negotiation. |
| **407** | Proxy requires authentication. | Malicious traffic via misconfigured proxy. |
| **408** | Client timeout. | Repeated → **Slow HTTP DoS**. |
| **409** | Version conflict. | Bot-driven API misuse. |
| **410** | Resource gone. | Attackers probing removed but once-sensitive endpoints. |
| **411/412** | Length/Precondition checks. | Exploit attempts with malformed headers. |
| **413** | Payload too large. | Oversized uploads → **DoS attempt**. |
| **414** | URL too long. | Attackers testing **buffer overflow/path traversal**. |
| **415** | Unsupported file type. | Uploading malicious executables. |
| **416** | Invalid range. | Attackers fuzzing byte ranges. |
| **417** | Expectation failed. | Abused by exploit tools. |
| **418** | Teapot joke. | If seen in logs → scanning tool / prank traffic. |
| **421** | Wrong host. | Recon tools misrouting traffic. |
| **422–424** | WebDAV errors. | Attackers abusing WebDAV endpoints. |
| **425** | Request too early. | Bot traffic misbehaving in TLS handshake. |
| **426** | Upgrade required. | Force attempts to downgrade security. |
| **428** | Preconditions needed. | Exploit tools failing checks. |
| **429** | Too many requests. | Legit traffic surge OR **rate-limited bot/DDoS flood**. |
| **431** | Headers too big. | Malicious **header injection**. |
| **451** | Blocked for legal reasons. | Unexpected block → censorship/tampering. |
| **500** | Internal server error. | **SQLi/XSS payloads** crashing app. |
| **501** | Not implemented. | Bots testing weird/unimplemented methods. |
| **502/504** | Bad gateway / timeout. | **DDoS or upstream exhaustion**. |
| **503** | Server unavailable. | Overload → active **DoS/DDoS**. |
| **505** | HTTP version not supported. | Attackers probing old protocol support. |
| **506–510** | Rare errors. | Misconfigurations exploited. |
| **511** | Network login required. | Captive portal hijacking attempts. |

---

✅ **Tip for Security Teams:**  
- **Scattered errors** → usually normal.  
- **Spikes, patterns, or repeated errors from same IP** → likely **malicious activity**.  

---
⸻

🛡️ Detecting Suspicious or Malicious Requests with HTTP Codes

Not every error means an attack — sometimes it’s just user error.
But patterns of responses (frequency, endpoints, timing) can signal malicious behavior such as scanning, brute force, DDoS, or exploitation attempts.

⸻

🔍 1xx: Informational

These are usually benign — rarely used in malicious traffic.
	•	100–103: Suspicious if massively repeated (e.g., attacker trying to keep many upload connections open to exhaust resources — a form of Slowloris attack).

⸻

✅ 2xx: Success

Looks “fine” but context matters:
	•	200: If thousands of 200 responses are logged against admin/login.php, could be a brute-force attempt that is succeeding.
	•	201: Sudden flood of account creations (201 responses) could be fake/spam registrations.
	•	202/204: Attackers may use them in probing APIs silently (successful but no visible output).

⸻

🔁 3xx: Redirection

Malicious signs:
	•	301/302: If sensitive endpoints suddenly redirect to unknown domains → could be phishing or server compromise.
	•	303/307/308: Repeated redirects to suspicious URLs might indicate open redirect vulnerability abuse (attackers trick users into phishing sites).

⸻

⚠️ 4xx: Client Errors (most useful for spotting malicious probing 🚨)

These often indicate attackers trying and failing:
	•	400: A spike in malformed requests (weird headers, SQL injection payloads) → injection attack attempts.
	•	401/403: Many repeated 401s/403s on login/admin pages → brute force or credential stuffing.
	•	404: Attackers scanning for hidden files (/wp-admin, /etc/passwd) → reconnaissance/scanning activity.
	•	405: Attackers testing unsupported methods like PUT/DELETE → method probing.
	•	406: Could indicate attacker fuzzing with strange content-type headers.
	•	408: Many timeouts → attempt at Slow HTTP DoS.
	•	409: Could signal automated tools clashing on API calls.
	•	410: Attackers probing for “deleted” resources (exploiting outdated endpoints).
	•	413: Upload attempts with oversized payloads → possible DoS attempt.
	•	414: Extremely long URLs → often buffer overflow or path traversal attempts.
	•	415: Attackers trying unexpected formats (e.g., uploading executables).
	•	418: If it ever appears in logs, could signal testing tools or bots.
	•	421/422/423: Malicious automation that misroutes or abuses WebDAV features.
	•	425: Attackers retrying too early → automated bot activity.
	•	429: Legitimate under load, but also indicates rate-limiting blocked a flood (likely bot or DDoS).
	•	451: Rare, but if sensitive resources suddenly blocked “for legal reasons,” could signal tampering or censorship attack.

👉 Key insight: If you see a lot of 404/401/403 from a single IP quickly, that’s a scanner or brute-force bot.

⸻

💥 5xx: Server Errors (often mean attackers pushed server too hard 🚨)
	•	500: If triggered by weird inputs, could mean attacker found an exploitable bug (e.g., SQL injection caused crash).
	•	501: Requests for unsupported methods → probing attempts.
	•	502/504: Could mean backend overwhelmed by botnets or DDoS.
	•	503: Frequent service unavailable → active DoS/DDoS attack.
	•	505: Bots using outdated/unsupported HTTP versions to bypass filters.
	•	506–510: Rare codes; if they appear, could indicate misconfigurations being exploited.
	•	511: Attackers hijacking captive portals or network login flows.

⸻

🔑 Quick Examples of Malicious Indicators
	•	Repeated 404s → Attacker scanning for hidden files (recon).
	•	Spike in 401/403 → Brute force attempts on login.
	•	Many 413/414 → Oversized payloads or long URLs → DoS attempts.
	•	500 errors after injections → Attacker found a vulnerable endpoint.
	•	503 flood → DDoS taking server offline.
	•	Unusual 3xx redirects → Phishing or open redirect abuse.

⸻

✅ Rule of thumb:
	•	Few errors scattered = normal.
	•	Spikes in specific error codes from same IPs = likely malicious.

⸻
